-- Бонусное задание 2. Работа со строками

-- 1. Сформируйте поле, которое указывает последние 4 цифры номера телефона сотрудника из таблицы HR.EMPLOYEES.
-----------------------------------------------------------------------------------------------------------------
select
    last_name || ' ' || first_name as employee,
    phone_number,
    substr (phone_number, -4) as four_last
from
    hr.employees;


-- 2. Сформируйте поле, показывающее вторую часть (после первой и до второй точки) номера телефона сотрудника из таблицы HR.EMPLOYEES.
-----------------------------------------------------------------------------------------------------------------
select
    last_name || ' ' || first_name as employee,
    phone_number,
    substr (phone_number, 
            instr (phone_number, '.', 1, 1) + 1, 
            instr (phone_number, '.', 1, 2) - instr (phone_number, '.', 1, 1) - 1) as second_part
from
    hr.employees;


-- 3. Приведите в порядок таблицу DE_COMMON.DATASOURCE: корректно заполните поля first_name, last_name; разделите поле email на email и phone; телефон отформатируйте по маске +7 (123) 456-78-90; унифицируйте поле gender.
-----------------------------------------------------------------------------------------------------------------
select 
    regexp_substr(
            trim(first_name) || ' ' || trim(last_name) /*source_char*/,
            '[a-zA-z]+' /*pattern*/
            ) as first_name,
    regexp_substr(
            trim(first_name) || ' ' || trim(last_name) /*source_char*/,
            '[a-zA-z]+' /*pattern*/,
            1 /*position*/,
            2 /*occurrence*/
            ) AS last_name,
    regexp_substr(
            trim(email) /*source_char*/,
            '.+@[a-zA-Z0-9.]+' /*pattern*/
            ) as email,
    replace(
        substr(
            regexp_replace(
                regexp_replace(
                    regexp_replace(
                        email,'.+@[a-zA-Z0-9.]+',''), '[+ -]' , '' ) , '^\d' , '+7 (') , 1 , 7 )
                            || ') ' ||
        substr(
            regexp_replace(
                regexp_replace(
                    regexp_replace(
                        email,'.+@[a-zA-Z0-9.]+',''), '[+ -]' , '' ), '^\d' , '+7 (') , 8 , 3 ) 
                            || '-' ||
        substr(
            regexp_replace(
                regexp_replace(
                    regexp_replace(
                        email,'.+@[a-zA-Z0-9.]+',''), '[+ -]' , '' ), '^\d' , '+7 (') , 11 , 2) 
                            || '-' ||
        substr(
            regexp_replace(
                regexp_replace(
                    regexp_replace(
                        email,'.+@[a-zA-Z0-9.]+',''), '[+ -]' , '' ), '^\d' , '+7 (') , 13 , 2), ') --' ,''
        ) as phone_number,
    case substr(trim(gender), 1, 1)
        when 'F' 
            then 'Female'
        when 'M'
            then 'Male'
        else
            'Unknown'
        end as gender
from 
    DE_COMMON.DATASOURCE;


-- 4. Решите без использования регулярных выражений: возьмите в работу таблицу DE_COMMON.BANK_CLIENTS. Создайте в своей схеме представление XXXX_V_BANK_CLIENTS, выводящее фамилию, имя и отчество клиента одним полем, в формате с первой заглавной буквой; номер счета; замаскированный номер карты (маскировка карт обычно осуществляется путем замены цифр во второй и третьей группе на знак «*»).
-----------------------------------------------------------------------------------------------------------------
create view 
    kela_v_bank_clients as 
select 
    initcap (last_name || ' ' || first_name || ' ' || patronymic) as fio,
    account,
    substr (card_num, 1, 5) || '**** ****' || substr (card_num, 15, 5) as card_num
from
    DE_COMMON.BANK_CLIENTS;


-- 5. Решите предыдущую задачу с использованием регулярных выражений
-----------------------------------------------------------------------------------------------------------------
create view 
    kela_v_bank_clients as 
select 
    initcap (last_name || ' ' || first_name || ' ' || patronymic) as fio,
    account,
    regexp_replace(card_num, '\d{4}\s\d{4}', '**** ****', 5) as card_num
from
    DE_COMMON.BANK_CLIENTS;
    

-- 6. Найдите пользователей, у которых в имени есть одна из букв (a,f,r,t)
-----------------------------------------------------------------------------------------------------------------
select 
    last_name,
    first_name
from
    hr.employees
where
    regexp_like (first_name, '[afrt]', 'i');
    

-- 7. Найдите пользователей, у которых имя начинается с одной из букв (a,f,r,t) 
-----------------------------------------------------------------------------------------------------------------
select 
    last_name,
    first_name
from
    hr.employees
where
    regexp_instr (first_name, '^[afrt]', 1, 1, 0, 'i') > 0;
    

-- 8. Таблица hr.employees. Выведите только те записи, в которых номер телефона имеет формат XXX.XXX.XXXX
-----------------------------------------------------------------------------------------------------------------
select 
    *
from
    hr.employees
where
    regexp_like (phone_number, '\d{3}\.\d{3}\.\d{4}');
    

-- 9. Таблица hr.departments. Выведите только те записи, у которых название департамента состоит не более, чем из 2 слов
-----------------------------------------------------------------------------------------------------------------
select 
    *
from
    hr.departments
where
    regexp_count (trim (department_name), '\s') <= 1;
    

-- 10. Создайте запрос, который позволяет найти строки с корректной электронной почтой (подумайте, как будете его тестировать имея те таблицы, которые у вас уже сейчас есть, вспомните возможность создавать временные таблицы через CTE
-----------------------------------------------------------------------------------------------------------------
with 
    testing_emails as (   
        select 'asfd@dfgasd.ru' as email from dual union all
        select '@dfd.com' as email from dual union all
        select 'asds@.ru' as email from dual union all
        select '111@asd.rof' as email from dual union all
        select 'a2365sdfgasd.org' as email from dual union all
        select 'as@dfgasd' as email from dual union all
        select '1@d.r' as email from dual union all
        select 'dsdghas2twagsd.co' as email from dual union all
        select 'ahsdfjhs@ru' as email from dual union all
        select 'twbe3 @gjsfg.of' as email from dual union all
        select 'gfmjs@ sdfh.org' as email from dual union all
        select 'as@dfgasd. ru' as email from dual union all
        select 
            email as email
        from 
            de_common.datasource
        union all
        select
            cust_email as email
        from 
            oe.customers
        ),
    tested_emails as (
        select
            email,
            case 
                when 
                    regexp_like (trim (email), '^[A-Za-z0-9._%+-]+@[A-Za-z0-9._%+-]+?\.[A-Za-z0-9_+-]{2,5}$', 'i')
                then
                    1
                else
                    0
            end as is_valid_email
        from 
            testing_emails
        )
select 
    email,
    is_valid_email
from   
    tested_emails
where
    is_valid_email = 1;
