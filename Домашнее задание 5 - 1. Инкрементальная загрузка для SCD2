-- Напишите скрипт для инкрементальной загрузки в SCD2 хранилище по аналогии с тем, что мы делали для SCD1:
-- - учтите новые записи
-- - учтите удалённые записи через логическое удаление (сведите задачу к учёту update изменений)
-- - учтите изменившиеся записи (закройте старую версию, создайте новую)
-- - храните версии в SCD2 таблицах (valid_from, valid_to, изменение версий подразумевает изменение атрибутов)

-- создаём и заполняем источник
create table kela_scd2_source (
	id number (2, 0) not null,
	val varchar2 (20),
	update_dt date);
insert into kela_scd2_source (id, val, update_dt ) values (1,'A',current_date - interval '7' day);
insert into kela_scd2_source (id, val, update_dt ) values (2,'B',current_date - interval '6' day);
insert into kela_scd2_source (id, val, update_dt ) values (3,'C',current_date - interval '5' day);
insert into kela_scd2_source (id, val, update_dt ) values (4,'D',current_date - interval '4' day);
insert into kela_scd2_source (id, val, update_dt ) values (5,'E',current_date - interval '3' day);
insert into kela_scd2_source (id, val, update_dt ) values (6,'F',current_date - interval '2' day);
insert into kela_scd2_source (id, val, update_dt ) values (7,'G',current_date - interval '1' day);

-- создаём временное хранилище, копируя метаданные через неверное условие
create table kela_scd2_stage as select * from kela_scd2_source where 1=0; 

-- создаём временное хранилище для id всех записей из источника
create table kela_scd2_stage_del as select id from kela_scd2_source where 1=0;

-- создаём целевую таблицу
create table 
    kela_scd2_target (
        id number (2, 0),
        val varchar2 (20),
        create_dt date,
        valid_from date,
        valid_to date,
        is_deleted char(1));

-- создаём таблицу с метаданными, инициируем первичную дату обновления 
create table kela_scd2_meta(
    schema_name varchar2(30),
    table_name varchar2(30),
    max_update_dt date
);
insert into 
    kela_scd2_meta  
    (
        schema_name,
        table_name, 
        max_update_dt
        )
values
    (
        'DE3AT',
        'KELA_SCD2_TARGET',
        to_date('01.02.2022 12:00:00','DD.MM.YYYY HH24:MI:SS')
    );

-- Инкрементальная загрузка

-- 1. Загрузка в STG (захват, extract)

-- очищаем временные хранилища
truncate table kela_scd2_stage;
truncate table kela_scd2_stage_del;

-- заполняем основное временное хранилище 
insert into 
    kela_scd2_stage (
        id, 
        val, 
        update_dt)
select 
    id, 
    val, 
    update_dt 
from 
    kela_scd2_source
where 
    update_dt > ( 
        select max_update_dt
        from kela_scd2_meta
        where schema_name = 'DE3AT' and table_name = 'KELA_SCD2_TARGET');

-- собираем все имеющиеся на данный момент id в источнике
insert into 
    kela_scd2_stage_del (id)
select 
    id 
from 
    kela_scd2_source;

-- 2. Выделение новых и изменённых записей (transform); вставка их в целевую таблицу (load)
-- Отбираем изменённые записи для последующей вставки в целевую таблицу

-- добавляем новую версию изменённых записей в целевую таблицу
insert into 
    kela_scd2_target (
            id, 
            val, 
            create_dt, 
            valid_from,
            valid_to,
            is_deleted)
with changed_records as (
    select 
        tgt.*,
        stg.val as stg_val,
        stg.update_dt as stg_update_dt,
        to_date('31.12.2999 23:59:59','DD.MM.YYYY HH24:MI:SS') as stg_valid_to
    from 
        kela_scd2_target tgt 
    inner join                                    
        kela_scd2_stage stg
        on tgt.id = stg.id
    where
        current_date between tgt.valid_from and tgt.valid_to
        and (stg.val <> tgt.val -- изменилось значение
            or (stg.val is null and tgt.val is not null)
            or (stg.val is not null and tgt.val is null)))
select 
    id, 
    stg_val, 
    create_dt, 
    stg_update_dt,
    stg_valid_to,
    is_deleted 
from 
    changed_records;

-- закрываем изменившиеся записи (дату) и добавляем новые
merge into 
    kela_scd2_target tgt
using 
    kela_scd2_stage stg
    on (stg.id = tgt.id)
when 
    matched -- закрываем изменившиеся записи
        then 
            update 
                set 
                    valid_to = stg.update_dt - interval '1' day
                where 
                    current_date between tgt.valid_from and tgt.valid_to
                    and (1=0   -- служебное условие для дебага
                    or stg.val <> tgt.val -- изменилось значение
                    or (stg.val is null and tgt.val is not null)
                    or (stg.val is not null and tgt.val is null))
when not matched -- добавляем новые записи
    then 
        insert (
            id,
            val, 
            create_dt,
            valid_from,
            valid_to,
            is_deleted
            ) 
        values (
            stg.id, 
            stg.val, 
            stg.update_dt,
            stg.update_dt,
            to_date('31.12.2999 23:59:59','DD.MM.YYYY HH24:MI:SS'),
            '0'
            );

-- 3. Обработка удалений

-- добавляем версию удалённых записей в целевую таблицу
insert into 
    kela_scd2_target (
            id, 
            val, 
            create_dt, 
            valid_from,
            valid_to,
            is_deleted)
-- Отбираем удалённые из источника записи
select 
    id, 
    val, 
    create_dt, 
    current_date,
    to_date('31.12.2999 23:59:59','DD.MM.YYYY HH24:MI:SS'),
    '1'
from
    kela_scd2_target 
where   
    current_date between valid_from and valid_to    -- последняя действующая запись
    and id in (
        select 
            tgt.id
        from 
            kela_scd2_target tgt 
        left join                                   -- при левом джойне id во временном хранилище будет нулевым 
            kela_scd2_stage_del stg_dld
            on tgt.id = stg_dld.id
        where
            stg_dld.id is null);

-- обновляем конечную дату валидности у удалённых записей
update 
    kela_scd2_target
set 
    valid_to = current_date - interval '1' day -- ставим вчерашнюю дату, так как не знаем даты удаления
where   
    current_date between valid_from and valid_to    -- последняя действующая запись
    and is_deleted = '0'
    and id in (
        select 
            tgt.id
        from 
            kela_scd2_target tgt 
        left join                                   -- при левом джойне id во временном хранилище будет нулевым 
            kela_scd2_stage_del stg_dld
            on tgt.id = stg_dld.id
        where
            stg_dld.id is null);

-- 4. Обновление метаданных.
update 
    kela_scd2_meta
set 
    max_update_dt = (
        select 
            max (update_dt) 
        from 
            kela_scd2_stage)
        where 
            schema_name = 'DE3AT' 
            and table_name = 'KELA_SCD2_TARGET';

-- подтверждаем все изменения
commit;

-- ПРОВЕРОЧНЫЕ ИЗМЕНЕНИЯ ИСТОЧНИКА
insert into kela_scd2_source (id, val, update_dt) values (8,'H', current_date);
update kela_scd2_source set val = null, update_dt = current_date where id = 3;
delete from kela_scd2_source where id = 7;
